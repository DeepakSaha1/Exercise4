position: static;
HTML elements are positioned static by default.

Static positioned elements are not affected by the top, bottom, left, and right properties.

An element with position: static; is not positioned in any special way;
it is always positioned according to the normal flow of the page:

div.static {
  position: static;
  border: 3px solid #73AD21;
}
============================================
position: relative;
An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element
will cause it to be adjusted away from its normal position. Other content will not be adjusted
to fit into any gap left by the element.

div.relative {
  position: relative;
  left: 50px;
  border: 3px solid #73AD21;
}
============================================

position: fixed;
An element with position: fixed; is positioned relative to the viewport,
which means it always stays in the same place even if the page is scrolled.
The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a gap in the page where it would normally have been located.

div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 500px;
  border: 3px solid #73AD21;
}

=============================================

position: absolute;
An element with position: absolute;
is positioned relative to the nearest positioned ancestor
(instead of positioned relative to the viewport, like fixed).

However; if an absolute positioned element has no positioned ancestors,
it uses the document body, and moves along with page scrolling.

div.relative {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
}

div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}

========================================
